#include <iostream>
#include <vector>
#include <cstdlib>

void FindPrimeSetBelow(int limit, std::vector<int>& prime_set) {
  prime_set.clear();
  for (int i = 0; i < limit; ++i) { // O(nlogn)
    int d = 2;
    for (; (d * d) < i+1; ++d) {
      if (i % d == 0) break;
    }
    if (i % d != 0) prime_set.push_back(i);
  }
}

bool IsPrime(int test_number, std::vector<int>& prime_set) {
  for (int i = 0; prime_set[i] <= test_number; ++i) {
    if (prime_set[i] == test_number) return true;
  }
  return false;
}

void SolveBruteForce() {
  std::vector<int> prime_set;
  FindPrimeSetBelow(1000000, prime_set);

  int a_max = 0, b_max = 0, n_max = 0;
  for (int a = -1000; a <= 1000; ++a) { // O(n^3)
    for (int b = -1000; b <= 1000; ++b) {
      int n = 0;
      while (IsPrime(::abs(n*n + a*n + b), prime_set)) n++;
      if (n > n_max) {
        a_max = a;
        b_max = b;
        n_max = n;
      }
    }
  }

  std::cout << "Prime sequence length: " << n_max
    << ", generated by a=" << a_max
    << ", b=" << b_max
    << ", product a*b=" << a_max * b_max << std::endl;
}

int main() {
  SolveBruteForce();
  return 0;
}
